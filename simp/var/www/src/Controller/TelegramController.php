<?php

namespace App\Controller;

use App\Repository\KeyVpnRepository;
use App\Repository\UserTGRepository;
use App\Service\KeyFileService;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use TelegramBot\Api\BotApi;
use TelegramBot\Api\Exception;
use TelegramBot\Api\InvalidArgumentException;
use Psr\Log\LoggerInterface;
use TelegramBot\Api\BaseType;

class TelegramController extends AbstractController
{

    private BotApi $obBot;
    private mixed $idChat;
    private mixed $textMenu;
    private object $obUser;

    /**
     * @throws Exception
     * @throws InvalidArgumentException
     */
    public function sendSms(
        ManagerRegistry $doctrine, ValidatorInterface $validator, UserTGRepository $obUserTGRepository,
        loggerInterface $logger, KeyFileService $obKeyFileService, KeyVpnRepository $obKeyVpnRepository
    ): Response {
        $this->setTextMenu();
        $this->obBot = new BotApi('7629831918:AAENHMwO8xBsBQSXF0Sfbh6eCeNsUBGgPG4');
    //    $res =    $this->obBot->setWebhook('https://www.vpnlands.ru/telegram');
        $arResponse['status'] = false;
        $obContent = $this->getDatacontent();
        if ($obContent) {
            if (property_exists($obContent, 'callback_query')) {
                $commandBot = $obContent->data;
                $this->idChat = $obContent->message['chat']['id'];
                $this->callback_query = $obContent->id;
               $this->obBot->answerCallbackQuery($this->callback_query);
            } else {
                $commandBot = $obContent->text;
                $this->idChat = $obContent->chat['id'];
            }
            $obUser = $obUserTGRepository->getUser($this->idChat);
            if ($obUser) {
                $this->obUser = $obUser;
            } else {
                $this->obUser = $obUserTGRepository->setUser((object)($obContent->from));
                $this->obUser->setAuthDate();
            }

            $obUserTGRepository->updateUser($this->obUser);
            $array_keyboard = [];
            switch ($commandBot) {
                case '/get_key';
                    $obKey = $obKeyFileService->getOneKeyTG();
                    if ($obKey) {
                        $this->sendKey($obKey->path);
                        $obKeyFileService->keyTransferSend($obKey);
                        $obKeyVpnRepository->setKey($obKey, $this->obUser->getIdTelegram());


                    } else {
                        $this->obBot->sendMessage($this->idChat, '–ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üôÉ', 'html');
                        $this->sendInstruction();
                    }

                    break;
                case '/start';
                    $array_keyboard = [];
                    // $this->obBot->sendPhoto($this->idChat,'https://s3m.tjcollection.ru/images/category/for_her_shoes.jpg');
                    $array_keyboard[] = [
                        ["callback_data" => "/get_key", "text" => "üóù –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á üóù"],
                        ["callback_data" => "/instruction", "text" => "üìó –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìó"],
                    ];
                      $array_keyboard[] = [
                          ["url" => "https://telegra.ph/iBoost-Polzovatelskoe-soglashenie-08-12", "text" => "üìñ –ü—Ä–∞–≤–∏–ª–∞ üìñ"],
                          ["url" => "https://t.me/share/url?url=t.me/a_test_table_bot&text=YOUR_TEXT", "text" => "üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è üîó"]
                      ];

                    $inline_keyboard = new \TelegramBot\Api\Types\Inline\InlineKeyboardMarkup($array_keyboard);
                    $this->obBot->sendMessage(
                        $this->idChat,
                        $this->textMenu,
                        'html',
                        null,
                        null,
                        $inline_keyboard,

                    );
                    break;
                case '/instruction';
                    $this->sendInstruction();
                    break;
                // case '/exit';
                //
                //         $this->obBot->editMessageReplyMarkup($this->idChat,   $this->idMessage,'remove_keyboard' => true);
                //     break;

            }
            $obUserTGRepository->updateUser($this->obUser);
            $arResponse['status'] = true;
        }


        return new Response($this->json($arResponse));
    }

    /**
     * @return void
     * @throws Exception
     * @throws InvalidArgumentException
     */
    private function sendInstruction()
    {
        $text = '‚ñ™Ô∏è–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenVPN Connect (<a href="https://play.google.com/store/apps/details?id=net.openvpn.openvpn">ANDROID</a>,  <a href="https://itunes.apple.com/us/app/openvpn-connect/id590379981">IOS</a>)
‚ñ™Ô∏èüëÜ–°–∫–∞—á–∞–π—Ç–µ –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏üëÜ –í—ã—à–µ
‚ñ™Ô∏è–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å.
<a href="https://telegra.ph/instrukciya-08-12-17">–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>';

        $this->obBot->sendMessage($this->idChat, $text, 'html',true);
    }

    /**
     * @return void
     * @throws Exception
     * @throws InvalidArgumentException
     */
    private function sendKey($path)
    {
        $array_keyboard[] = [
            ["callback_data" => "/instruction", "text" => "üìó –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ üìó"]
        ];
        $inline_keyboard = new \TelegramBot\Api\Types\Inline\InlineKeyboardMarkup($array_keyboard);
        $obDocument = new \CURLFile($path);
        $this->obBot->sendDocument($this->idChat, $obDocument,'–∫–ª—é—á openVpn',null, $inline_keyboard  );
    }

    /**
     * @return object|bool
     */
    private function setTextMenu()
    {
        $textMenu = '&#173; <b> üåç –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN! üåç </b>
<pre></pre>
–û–±–æ–π–¥–∏—Ç–µ –æ–Ω–ª–∞–π–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –±—ã—Å—Ç—Ä—ã–π, –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π VPN. –ù–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—Å–∫–æ—Ä–∏—Ç—å –∏–≥—Ä—É –∏ –∑–∞—â–∏—Ç–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π —Å–µ—Ç–∏ –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è Android –∏ iOS, —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö –ø–æ–¥ –ª—é–±–æ–π –û–° –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞—Ö.
    <pre></pre>
  
<b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>';
        $this->textMenu = $textMenu;
        return true;
    }

    /**
     * @param false $fake
     *
     * @return object|bool
     */
    private function getDataContent( bool $fake = false): object|bool
    {
        $obRequest = Request::createFromGlobals();
        if(!$fake){
            file_put_contents('/usr/share/nginx/html/var/log/call.json', print_r($obRequest->getContent(), true));
        }
        $content = $fake ? file_get_contents('/usr/share/nginx/html/var/log/call.json') : $obRequest->getContent();
     //   dump($content);
        $arContent = json_decode($content, true);
        foreach (['callback_query', 'message'] as $v) {
            if (array_key_exists($v, $arContent)) {
                if ($v == 'callback_query') {
                    $arContent[$v][$v] = true;
                }
                return (object)$arContent[$v];
            }
        }
        return false;
    }

}